$col: 12;
$gutter: 8px;
$gutter-compensate-increase: $gutter*2;

// Basic flex property settings
%flex {
  display: flex;
  flex-wrap: wrap;
  box-sizing: border-box;
}

// Global properties for all grid columns
%grid-global {
  @extend %flex;
  padding: 0;
  margin: 0 0 $gutter 0;
}

.grid-gutter {
  padding: 0 $gutter;
}

// Main Content container, top-level grid
.grid-container {
	@extend %flex;
}

.grid-row{
	width: 100%;

	&:after {
		content: "";
		display: table;
		clear: both;
	}
}

// Mixin to create grid columns
@mixin grid-columns($class, $c: true) {

  @for $i from 1 through $col {

	$width: percentage($i/$col);
	$grid-class-name: 'grid-#{$class}-col#{$i}';

	.#{$grid-class-name} {

	  // If we are pushing content
	  @if $c {
		@content;

	  // Needed once to build the column width
	  } @else {

		@include breakpoint-min($class) {
		  float: left;
		  max-width: $width;
		  width: $width;
		  flex-basis: $width;
		}
	  }
	}

  }
}

// Offset classes
@mixin grid-offset($class) {
  @for $i from 0 through ($col)-1 {

	$margin: percentage(1-((($col)-($i))/$col));
	$grid-offset-class-name: 'grid-#{$class}-offset-col#{$i}';

	.#{$grid-offset-class-name} {
	  margin-left: $margin;
	}
  }
}

// Builds grids and widths
@each $class in $view-class {

  @include grid-columns($class, false) {
	// Extends global list of properties to all grid columns
	@extend %grid-global;
  }

  @include breakpoint-min($class) {
	@include grid-offset($class);
  }
}

// Nested Grid
.grid-nester { margin-bottom: 0; }
